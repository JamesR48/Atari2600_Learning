
	processor 6502
        include "vcs.h"
        include "macro.h"
        include "xmacro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start an unitialized segment at $80 for variable declaration
; We've memory from $80 to $FF to work with, minus a few at the
; end if we use the Stack
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	seg.u Variables
        org $80

BGColor ds 1 ; Background color byte
PFColor ds 1 ; Playfield color byte
ScoreColor ds 1 ; Score-Playfield color byte
DamageFXColor ds 1

P0PosY ds 1 ; Defines 1 byte for Player0 sprite Vertical Position
P0PosX ds 1 ; Defines 1 byte for Player0 sprite Horizontal Position

DemonPosY ds 1 ; Defines 1 byte for Player0 sprite Vertical Position
DemonPosX ds 1 ; Defines 1 byte for Player0 sprite Horizontal Position

; words are 2 bytes long
; memory addresses are stored in 2 bytes
PlayerSpritePtr word ; Pointer to P0 sprite Lookup table
PlayerColorPtr word ; Pointer to P0 colors Lookup table
PlayerAnimOffset byte ; P0 sprite frame offset (for animations!)

PlayerIdle0 ds 1
PlayerIdle1 ds 1

DemonSpritePtr word ; Pointer to P0 sprite Lookup table
DemonColorPtr word ; Pointer to P0 colors Lookup table

Rand8 ds 1 ; 8 bits seed value for the random generator

Score ds 1 ; 2-digit score stored as BCD (Binary Coded Decimal)
; It's important to declare the timer right after the Score
; in contiguos memory locations
Timer ds 1 ; 2-digit timer stored as BCD (Binary Coded Decimal)

; These are words because they'll be handling score and timer together
OnesDigitOffset word ; look-up table offset for the score 1's digit (0000 score 0000 timer)
TensDigitOffset word ; look-up table offset for the score 10's digit (0000 score 0000 timer)

ScoreSprite ds 1 ; Current found Score Digit Graphic to display
TimerSprite ds 1 ; Current found Timer Digit Graphic to display

TempVar ds 1 ; Auxiliary variable to store temporary data (like Score values)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Define Constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
P0_HEIGHT equ #9
DEMON_HEIGHT equ #17
DIGITS_HEIGHT equ #5 ; Scoreboard Digits height

FineAdjustTable equ FineAdjustBegin - %11110001; NOTE: %11110001 = -15

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Init Catridge
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	seg Code
        org $f000
        
Start:
	CLEAN_START

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initial setup of Background and Players
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        lda #$02
        ; Set Background color to grey
        sta BGColor
        
        ldy #$35
        sty PFColor ; Set Playfield color to red
        lda #$1c
        sta ScoreColor ; Set Score-Playfield color to white
        lda #$ff
        sta DamageFXColor
        
	lda #80
        sta P0PosX ; Set P0 initial Horizontal Position
        lda #18
        sta P0PosY ; Set P0 initial Vertical Position
        lda #<PlayerFront
        sta PlayerSpritePtr ; lo-byte pointer for sprite lookuptable
        lda #>PlayerFront
        sta PlayerSpritePtr+1 ; hi-byte pointer for sprite lookuptable
        lda #<PlayerColors
        sta PlayerColorPtr ; lo-byte pointer for color lookuptable
        lda #>PlayerColors
        sta PlayerColorPtr+1 ; hi-byte pointer for color lookuptable
        
        lda #20
        sta DemonPosX ; Set P0 initial Horizontal Position
        lda #68
        sta DemonPosY ; Set P0 initial Vertical Position
        lda #<DemonGraphics
        sta DemonSpritePtr ; lo-byte pointer for sprite lookuptable
        lda #>DemonGraphics
        sta DemonSpritePtr+1 ; hi-byte pointer for sprite lookuptable
        lda #<DemonColors
        sta DemonColorPtr ; lo-byte pointer for color lookuptable
        lda #>DemonColors
        sta DemonColorPtr+1 ; hi-byte pointer for color lookuptable
        lda #%00000101 ; Double size Player 1
        sta NUSIZ1
        
        lda #%1001
        sta Rand8 ; initialize the Random Seed (8bits)
        
        lda #0
        sta Score
        sta Timer
        
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start New Frame by configuring VBlank and VSync
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
NextFrame:
	lsr SWCHB	; test Game Reset switch
        bcc Start	; reset?
        
	lda #2
        sta WSYNC
