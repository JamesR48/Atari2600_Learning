
	processor 6502
        include "vcs.h"
        include "macro.h"
        include "xmacro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start an unitialized segment at $80 for variable declaration
; We've memory from $80 to $FF to work with, minus a few at the
; end if we use the Stack
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	seg.u Variables
        org $80

BGColor ds 1 ; Background color byte
PFColor ds 1 ; Playfield color byte
ScoreColor ds 1 ; Score-Playfield color byte
DamageFXColor ds 1

P0PosY ds 1 ; Defines 1 byte for Player0 sprite Vertical Position
P0PosX ds 1 ; Defines 1 byte for Player0 sprite Horizontal Position
DemonPosY ds 1 ; Defines 1 byte for Player0 sprite Vertical Position
DemonPosX ds 1 ; Defines 1 byte for Player0 sprite Horizontal Position

Missile0PosY ds 1
Missile0PosX ds 1

; words are 2 bytes long
; memory addresses are stored in 2 bytes
PlayerSpritePtr word ; Pointer to P0 sprite Lookup table
PlayerColorPtr word ; Pointer to P0 colors Lookup table
PlayerAnimOffset byte ; P0 sprite frame offset (for animations!)

PlayerIdle0 ds 1
PlayerIdle1 ds 1

DemonSpritePtr word ; Pointer to P0 sprite Lookup table
DemonColorPtr word ; Pointer to P0 colors Lookup table

Rand8 ds 1 ; 8 bits seed value for the random generator

Score ds 1 ; 2-digit score stored as BCD (Binary Coded Decimal)
; It's important to declare the timer right after the Score
; in contiguos memory locations
Timer ds 1 ; 2-digit timer stored as BCD (Binary Coded Decimal)

; These are words because they'll be handling score and timer together
OnesDigitOffset word ; look-up table offset for the score 1's digit (0000 score 0000 timer)
TensDigitOffset word ; look-up table offset for the score 10's digit (0000 score 0000 timer)

ScoreSprite ds 1 ; Current found Score Digit Graphic to display
TimerSprite ds 1 ; Current found Timer Digit Graphic to display

TempVar ds 1 ; Auxiliary variable to store temporary data (like Score values)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Define Constants
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
P0_HEIGHT equ #9
DEMON_HEIGHT equ #17
DIGITS_HEIGHT equ #5 ; Scoreboard Digits height

FineAdjustTable equ FineAdjustBegin - %11110001; NOTE: %11110001 = -15

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Init Catridge
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	seg Code
        org $f000
        
Start:
	CLEAN_START

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initial setup of Background and Players
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        lda #$02
        ; Set Background color to grey
        sta BGColor
        
        ldy #$35
        sty PFColor ; Set Playfield color to red
        lda #$1c
        sta ScoreColor ; Set Score-Playfield color to white
        lda #$ff
        sta DamageFXColor
        
	lda #80
        sta P0PosX ; Set P0 initial Horizontal Position
        lda #18
        sta P0PosY ; Set P0 initial Vertical Position
        lda #<PlayerFront
        sta PlayerSpritePtr ; lo-byte pointer for sprite lookuptable
        lda #>PlayerFront
        sta PlayerSpritePtr+1 ; hi-byte pointer for sprite lookuptable
        lda #<PlayerColors
        sta PlayerColorPtr ; lo-byte pointer for color lookuptable
        lda #>PlayerColors
        sta PlayerColorPtr+1 ; hi-byte pointer for color lookuptable
        
        lda #20
        sta DemonPosX ; Set P0 initial Horizontal Position
        lda #68
        sta DemonPosY ; Set P0 initial Vertical Position
        lda #<DemonGraphics
        sta DemonSpritePtr ; lo-byte pointer for sprite lookuptable
        lda #>DemonGraphics
        sta DemonSpritePtr+1 ; hi-byte pointer for sprite lookuptable
        lda #<DemonColors
        sta DemonColorPtr ; lo-byte pointer for color lookuptable
        lda #>DemonColors
        sta DemonColorPtr+1 ; hi-byte pointer for color lookuptable
        ; https://forums.atariage.com/topic/93007-nusiz01-question/
        lda #%00000101 ; Double size Player 1
        sta NUSIZ1
        
        lda #%1001
        sta Rand8 ; initialize the Random Seed (8bits)
        
        lda #0
        sta Score
        sta Timer

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Declare a Macro to check if a Missile should be displayed
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	MAC DRAW_MISSILE
        lda #%00000000
        ; Compare X (current scanline) with Missile Y Pos
        cpx Missile0PosY
        bne .DontDraw ; if(X != MissilePosY)
.Draw:
	lda #%00000010
        inc Missile0PosY
.DontDraw:
        sta ENAM0
        ENDM
        
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start New Frame by configuring VBlank and VSync
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
NextFrame:
	lsr SWCHB	; test Game Reset switch
        bcc Start	; reset?
        
	lda #2
        sta WSYNC
        sta VSYNC ; Turn on Vertical Synchronization
        sta VBLANK ; Turn on Vertical Blank

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set 3 empty Scanlines for VSYNC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        sta WSYNC ; Wait (Horizontal Blank) Synchronization
        sta WSYNC
        lda #0
        sta WSYNC
        sta VSYNC ; turn off VSYNC

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set 37 empty Scanlines for VBLANK
; But this time just 31 because the Horizontal Positioning
; and other calculation took 6 already
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ldx #31
VBlankLoop:
        dex
        sta WSYNC
        bne VBlankLoop

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set Players Horizontal Position while in VBLank
; Also calculate current Scoreboard drawing offset
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        lda P0PosX ; Load A with desired horizontal Position
        ;and #%01111111 ; (bitwise AND) Forces bit 7 to 0 (#$7F)
        ;clc
        ;adc #15
        ; So the value in (A) will always be positive (like Abs)
        ldy #0 ; Y assigned to Player 0
        jsr SetObjectPosX ; Jump to subroutine

        ;sta WSYNC ; Wait next Scanline
        lda DemonPosX ; Load A with desired horizontal Position
        ;and #%01111111 ; (bitwise AND) Forces bit 7 to 0 (#$7F)
        ;clc
        ;adc #14

        ldy #1 ; Y assigned to Player 1
        jsr SetObjectPosX ; Jump to subroutine

	lda Missile0PosX
        ldy #2
        jsr SetObjectPosX

; Calculate Scoreboard Digits look-up table offset
        jsr CalculateDigitOffset

	jsr GenerateConstantSound

        sta WSYNC ; Wait next Scanline
        sta HMOVE ; Apply fine position offset

; turn off VBLANK
	ldx #0
        sta WSYNC ; Wait next Scanline
	stx VBLANK 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Display the Scoreboard scanlines
; The Score/Timer digits will be drawn using 2 scanlines
; so they'll be stretched vertically (for readability)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	; clear TIA registers before each new frame 
	stx PF0
        stx PF1
        stx PF2
        stx GRP0
        stx GRP1
        ; Set Control Playfield register to disable reflection (for Score)        
        ; CTRLPF Register (D0 = 0 means don't reflect)
        stx CTRLPF

        lda ScoreColor
        sta COLUPF

; Display 5 empty scanlines above where the scoreboard goes
        ldx #5
PrevScoreSpace:
	dex
        sta WSYNC
        bne PrevScoreSpace

	; Start drawing the score
	ldx #DIGITS_HEIGHT
ScoreDigitsLoop:
	ldy TensDigitOffset ; Get the Tens Digit Offset for the score
        lda DigitsGraphics,Y ; Search the Digit Graphic in the look-up table
        and #%11110000 ; (#$F0) Remove the last 4bits (Ones) of the found Graphics
        sta ScoreSprite ; Move the Score Tens Digit Graphic in a variable

        ldy OnesDigitOffset ; Get the Ones Digit Offset for the score
        lda DigitsGraphics,Y ; Search the Digit Graphic in the look-up table
        and #%00001111 ; (#$0F) Remove the 1st 4bits (Tens) of the found Graphics

        ora ScoreSprite ; Merge the Score Tens graphics with the Ones!
        sta ScoreSprite ; Save the full Score Digit graphic (Tens and Ones) 

        sta WSYNC ; Wait for the end of the Scanline
        sta PF1 ; Update the PF to display the Score Graphics

        ; Now get the Tens Digit Offset for the Timer
        ; +1 because the Timer is in a contiguous memory position to the Score
        ldy TensDigitOffset+1
        lda DigitsGraphics,Y ; Search the Digit Graphic in the Look-up table
        and #%11110000 ; (#$F0) Remove the last 4bits (Ones) of the graphics
        sta TimerSprite ; Save the Timer Tens graphics in a variable

        ldy OnesDigitOffset+1 ; Get the Ones Digit Offset for the Timer
        lda DigitsGraphics,Y ; Search the Digit Graphic in the Look-up table
        and #%00001111 ; (#$0F) Remove the 1st 4bits (Tens) of the graphics

        ora TimerSprite ; Merge the Timer Tens and Ones graphics
        sta TimerSprite ; Save the Timer full graphics (Tens and Ones) ;31

        ; Waste some cycles to wait for the beam to go a little bit
        ; to the right and display the Timer graphics in the correct
        ; desired position (right side of the screen)
        jsr Sleep12Cycles

        sta PF1 ; Display the Timer graphics using PF1

        ldy ScoreSprite ; Preload for the next Scanline
        sta WSYNC ; Wait for next Scanline

        sty PF1 ; Display the Score graphics using PF1
        inc TensDigitOffset ; Move to the next Score Tens Digit offset
        inc TensDigitOffset+1 ; Move to the next Timer Tens Digit offset
        inc OnesDigitOffset ; Move to the next Score Ones Digit offset
        inc OnesDigitOffset+1 ; Move to the next Timer Ones Digit offset

        jsr Sleep12Cycles

	dex
        sta PF1 ; Display the Timer graphics using PF1
        bne ScoreDigitsLoop
	sta WSYNC ; Wait for next Scanline

        stx PF1 ; Turn off score drawing
        sta WSYNC ; Wait for next Scanline

; Display 5 empty scanlines below where the scoreboard goes
        ldx #5
PostScoreSpace:
	sta WSYNC
	dex
        bne PostScoreSpace

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Here starts the 96 visible Scanlines (because of 2-line drawing)
; But actually...91, because of the 10 empty scoreboard lines
; (192 - scoreboardlines[10]) / 2 [2-line drawing] = 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DrawPlayfield:
	sta WSYNC
        lda BGColor
        sta COLUBK
	; CTRLPF Register (D0 = 1 means reflect)
	lda #%00000001 
        sta CTRLPF
	ldy PFColor
        sty COLUPF ; Set Playfield color
        ldy #%01110000
        sty PF0 ; Draw PlayField0 pattern

        ldx #91 ; X will hold the remaining Scanlines
GameScanlineLoop:
	; Macro to check if missile should be drawn
	DRAW_MISSILE

.IsPlayer0InScreen:
	txa ; transfer X to A
        sec ; Set Carry flag before subtracting
        sbc P0PosY ; Subtract P0 sprite Y coordinate - A
        cmp #P0_HEIGHT ; Are we inside the sprite height bounds?
        bcc .DrawPlayer0 ; If result < SpriteHeight, draw player
        lda #0 ; Else, set index to 0, turning off P0 graphics
.DrawPlayer0:
	clc ; Clear Carry flag before Adding
	adc PlayerAnimOffset ; Jump to correct sprite frame address in memory
	tay
        lda (PlayerSpritePtr),Y ; Loop the PlayerGraphics table
        sta WSYNC ; Wait for Horizontal Synchronization (next Scanline)
        sta GRP0 ; Set the graphics of P0 for this Scanline
        lda (PlayerColorPtr),Y ; Loop the PlayerColors table
        sta COLUP0 ; Set the P0 color for this Scanline

.IsDemonInScreen:
	txa ; transfer X to A
        sec ; Set Carry flag before subtracting
        sbc DemonPosY ; Subtract P0 sprite Y coordinate - A
        cmp #DEMON_HEIGHT ; Are we inside the sprite height bounds?
        bcc .DrawDemon ; If result < SpriteHeight, draw player
        lda #0 ; Else, set index to 0, turning off P0 graphics
.DrawDemon:
	tay
        lda (DemonSpritePtr),Y ; Loop the PlayerGraphics table
        sta WSYNC ; Wait for Horizontal Synchronization (next Scanline)
        sta GRP1 ; Set the graphics of P1 for this Scanline
        lda (DemonColorPtr),Y ; Loop the PlayerColors table
        sta COLUP1 ; Set the P1 color for this Scanline

        dex
        bne GameScanlineLoop

        ; Reset values each frame
        lda #0
        sta PlayerAnimOffset ; Reset P0 Anim frames
        sta REFP0 ; Set P0 Graphics to not reflect
        sta WSYNC ; Wait for Horizontal Synchronization (next Scanline)
        lda #$04 ; Set the Scoreboard BG color to light grey         
        sta COLUBK

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set 30 empty Scanlines for Overscan
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ldx #30
        lda #2
        sta VBLANK ; Turn on VBLANK
OverscanLoop:
	sta WSYNC ; Wait for Horizontal Synchronization (next Scanline)
        dex
        bne OverscanLoop

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Testing Joystick Input
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;        
; SWCHA register stores the Joystick axis inputs in 1 byte
; 1st 4 bits are P0 Input, 2nd are P1's
; 0 means pressed, so by default they'll be #%1111 1111
; 0001 0000 - P0 Up pressed
; 0010 0000 - P0 Down pressed
; 0100 0000 - P0 Left pressed
; 1000 0000 - P0 Right pressed
CheckP0Up:
	lda #%00010000
        ; bit is like Bitwise AND, but doesn't store
        ; the result, just raise flags
        bit SWCHA
        bne CheckP0Down ; Not pressing Up? Check if pressing Down
        lda #96-(P0_HEIGHT+4) ; 4 = P0_HEIGHT/2 aprox.
        cmp P0PosY ; Is the player in the upper limit? Stop movement
        beq CheckP0Down
        inc P0PosY ; Move up

CheckP0Down:
	lda #%00100000
        bit SWCHA
        bne CheckP0Left ; Not pressing Down? Check if pressing Left
        lda #2 ; 2 = P0_HEIGHT/4 aprox.
        cmp P0PosY ; Is the player in the lower limit? Stop movement
        beq CheckP0Left
        dec P0PosY ; Move down

CheckP0Left:
	lda #%01000000
        bit SWCHA
        bne CheckP0Right
        dec P0PosX
        lda #P0_HEIGHT
        sta PlayerAnimOffset

CheckP0Right:
	lda #%10000000
        bit SWCHA
        bne CheckP0Button
        inc P0PosX
        lda #P0_HEIGHT
        sta PlayerAnimOffset
        lda #%00001000
        sta REFP0

CheckP0Button:
	lda #%10000000
        bit INPT4 ;INPT4 register stores P0's button action
        bne NoInputPressed
	
; Set Fist position
	lda P0PosX
        clc
        adc #4
        sta Missile0PosX
        lda P0PosY
        clc
        adc #4
        sta Missile0PosY
         ; https://forums.atariage.com/topic/93007-nusiz01-question/
        lda #%00010000 ; Double size Missile 0
        sta NUSIZ0
        
        
NoInputPressed:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Calculations to update position for next frame
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	sta WSYNC
UpdateDemonPosition:
	lda DemonPosY
        clc ; Clear carry before comparing
        cmp #0 ; compare Demon Y-Position with 0
        ; If position is < 0 (reached the bottom), reset it back to the top
        bmi ResetDemonPosition
        dec DemonPosY ; Else, make the Demon move down
        jmp EndPositionUpdate
ResetDemonPosition:
	lda #96 ; Because of 2-line kernel, #96 is the screen top Scanline
        sta DemonPosY
        
        jsr RandomNumGenerator
        and #97
        clc
        adc #20

        ;lda P0PosX
        sta DemonPosX

; Fall back for the Position Update code        
EndPositionUpdate:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Check collisions before ending the frame
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CheckCollisionP0PF:
	; CXP0FB bit 7 detects P0-PF collisions, bit 6 P0-Ball collisions
	lda #%10000000
        bit CXP0FB
        bne OnCollisionP0PF ;If collision, check response

CheckCollisionP0P1:
	; CXPPMM bit 7 detects P0-P1 collisions, bit 6 Missile0-1 collisions
	lda #%10000000
        bit CXPPMM
        bne OnCollisionP0P1
       	jsr ResetBGPFColors ; Reset BG and PF colors if no collision happens

CheckCollisionM0P1:
	; CXM0P bit 7 detects M0-P1 collisions, bit 6 M0-P0 collisions
	lda #%10000000
        bit CXM0P
        bne OnCollisionM0P1
        
        lda #%00000000
        sta AUDV0
        sta AUDF0
        sta AUDC0
        
        jmp EndCollisionCheck ; End collision checking if none happened

OnCollisionP0PF:
	jmp Start ; Restart the game when colliding with the PF

OnCollisionP0P1:
	lda DemonPosY
        sec
        sbc P0PosY
        bne EndCollisionCheck
	jsr GameOver
	;dec P0PosY
        jmp EndCollisionCheck

OnCollisionM0P1:
	; Increase Score        
        sed ; Set enable BCD (Binary Coded Decimal) for the Score
        lda Score
        clc ; Clear Carry before addition
        adc #1 ; Add 1 to A
        sta Score ; Save the incremented score
        cld ; Clear/Disable the BCD
        ; INC will always return a binary result regardless
        ; of the D flag value (Decimal mode On or Off)
        ;inc Score
        lda #0
        sta Missile0PosY
        jsr GameOver
        
        lda #4
        sta AUDV0
        lda #0
        sta AUDF0
        lda #6
        sta AUDC0

; Fall back for the collision checking        
EndCollisionCheck:
	sta CXCLR ; Always clear all collision flags before next frame

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Jump to next frame
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	jmp NextFrame

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Subroutine to set the X position of objects with fine offset
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;               
; (A)ccumulator register contains the desired X-coordinate
; (Y) register needs to be loaded before calling the subroutine
; Y=0 : Player 0
; Y=1 : Player 1
; Y=2 : Missile 0
; Y=3 : Missile 1
; Y=4 : Ball
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SetObjectPosX subroutine
	sta WSYNC ; Wait next scanline      
        sec ; Set Carry flag before subtracting
DivisionLoop:
	sbc #15 ; Subtract 15 from A
        bcs DivisionLoop ; Loop while carry is still set (A >= 15)
        ; Meaning we can't subtract by 15 anymore (A < 15)
	; (A) will contain the division remainder minus 15 at the end

        ; Adjust the range of the division remainder from -8 to 7
        ;eor #%00000111 ; same as #7 decimal
        ;asl ; Shift left A by 4, HMP0 uses only the left 4bits
        ;asl 
        ;asl 
        ;asl 

        ; Testing the use of a look-up table for Fine Adjustment
        ; From https://www.randomterrain.com/atari-2600-memories-tutorial-andrew-davie-24.html
        tax
        lda FineAdjustTable,X

        sta HMP0,Y ; Set fine position
        sta RESP0,Y ; Fix the player at the 15-step rough position

        sta WSYNC ; Wait next Scanline
        ; Return subroutine
        ; returns Program Counter to the point where this was called
        rts 

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Random number generator LFSR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; https://www.randomterrain.com/atari-2600-lets-make-a-game-spiceware-10.html
; https://www.youtube.com/watch?v=Ks1pw1X22y4
RandomNumGenerator subroutine
	lda Rand8
        lsr ; Logical Shift Right
        bcc NoEOR
        eor #$B4
NoEOR:
	sta Rand8
        rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Game Over Subroutine
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
GameOver subroutine
	; Set the BG and PF to Damage color (like a flash)
	lda DamageFXColor
        sta BGColor
        sta PFColor
        ;lda #0 ; Reset Score
        ;sta Score
	rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; subroutine to handle Scoreboard digits to be displayed
; Convert High and Low nibbles of the variable Score and Timer
; into the offsets of digits look-up table for display.
; Each digit has a height of 5bytes in the table

; For the Low nibble, multiply by 5 (height)
; - We can use left shifts to multiply by 2
; - For any number n (in the digits), value of n*5 = (n*2*2)+n = n ASL ASL + n

; For the High nibble, since its already times 16, we need to divide by 16 and multiply by 5 (height)
; - We can use right shifts to divide by 2
; - For any number n (in the digits), value of (n/16)*5 = (n/2/2) + (n/2/2/2/2)
; Because (n/16)*5 = (n/4)+(n/16) = (16n + 4n)/64 = (20n)/64 = (10n)/32 = (5n)/16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CalculateDigitOffset subroutine
	; loop that will run twice, one for handling score, the other for time
        ldx 1 ; Loop counter
.PrepareScore: ; loop twice, 1st with X = 1, 2nd with x = 0
	; Store in A, the value in Score's variable memory position + X
        ; Score + X -> Score + 1 -> Timer's variable memory position!
        ; Score + X -> Score + 0 -> Score's variable memory position!
        lda Score,X 
        ; Force 1st 4bits to be 0, removing the tens from the Digit!
        and #%00001111 ; same as #$0F
        sta TempVar ; Save the result in the Temp variable

        ; Calculate Low nibble (one's digit), n*5 = (n*2*2)+n
        asl ; Arithmetic Shift Left (n*2)
        asl ; Arithmetic Shift Left (n*4)
        adc TempVar ; (n*4)+n
        sta OnesDigitOffset,X ; Save A One's offset in timer when x=0, in score when x=1

        ; Calculate High nibble (ten's digit), (n/16)*5 = (n/2/2)+(n/2/2/2/2)
        lda Score,X ; Load A with Timer when X=1, and Score when X=0
        ; Force 2nd 4bits to be 0, removing the ones from the Digit!
        and #%11110000 ; same as #$F0
        lsr ; Logical Shift Right (n/2)
        lsr ; Logical Shift Right (n/4)
        sta TempVar ; Save (n/4) in TempVar
        ; Know A = (n/4), keep shifting until (n/16)
        lsr ; Logical Shift Right (n/8)
        lsr ; Logical Shift Right (n/16)
        adc TempVar ; (n/16) + (n/4)
        sta TensDigitOffset,X ; Save A Ten's offset in timer when x=0, in score when x=1

        dex
        bpl .PrepareScore ; While X > 0, loop again
        rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Routine to reset the colors of the Background and Playfield
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ResetBGPFColors subroutine
	lda #$02 ; BG to Grey
        sta BGColor
        lda #$35 ; PF to Red
        sta PFColor
	rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Sleep/Waste 12 CPU Cycles routine
; jsr takes 6 cycles
; rts takes another 6 cycles
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Sleep12Cycles subroutine
	rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Playing a looping sound through the whole game routine
; changing it based on Gameplay events
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
GenerateConstantSound subroutine
	; If you want a full technical description of these AUDC values, these are the reference materials that I usually use:
        ; 1.) https://alienbill.com/2600/cookbook/music/stolberg.txt (by Eckhard Stolberg)
        ; 2.) https://alienbill.com/2600/basic/music/ (by Alien Bill)
        
        ; Audio Programs
        ; 1.) https://alienbill.com/2600/basic/music/tune2600.html
        ; 2.) https://bitbucket.org/kylearan/tiatracker/src/master/
        ; 2's Manual: https://bitbucket.org/kylearan/tiatracker/raw/master/data/TIATracker_manual.pdf
        
        ; AUDV0 controls the volume, 0=quiet / 15=loudest
        lda #1
        sta AUDV0
        
        ; AUDF0 controls the pitch/frequency, 0=highest / 31=lowest
	; Here the pitch will change based on Demon's Y movement
        ; The nearest he's to lower screen bound, the lower the pitch
        ; 31 - (YPos/8)
        lda DemonPosY
        clc
        adc #4
        lsr ; Logical Shift Right, divide by 2
        lsr ; divide by 4
        lsr ; divide by 8
        sta TempVar ; Store the result (Y/8) in the Temp variable
        lda #31
        sec
        sbc TempVar ; 31 - (Y/8)
        sta AUDF0
        
        ; AUDC0 is the tone type
        ; 0,11 = Silent
        ; 1 = Buzz
       	; 2,3 = Rumble
        ; 4,5 = Pure Tone (Sine wave)
        ; 6,10 = Square Wave
        ; 7,9 = Buzz
        ; 8 = White Noise
        ; 12,13 = Pure Tone (Sine wave)
        ; 14 = Square wave
        ; 15 = Buzz
        lda #1
        sta AUDC0
	rts

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Demon Graphics
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

DemonGraphics:
	.byte #%00000000;
        .byte #%11000011;$34
        .byte #%11000011;$34
        .byte #%11100111;$00
        .byte #%01111110;$00
        .byte #%00111100;$34
        .byte #%11111111;$34
        .byte #%11111111;$34
        .byte #%11111111;$34
        .byte #%11111111;$34
        .byte #%11111111;$34
        .byte #%11111111;$34
        .byte #%01100110;$34
        .byte #%01111110;$34
        .byte #%11111111;$34
        .byte #%10000001;$34
        .byte #%10000001;$34

DEMON_HEIGHT = . - DemonGraphics

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Demon Color
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

DemonColors:
	.byte #%00000000;
        .byte #$34;
        .byte #$34;
        .byte #$00;
        .byte #$00;
        .byte #$09;
        .byte #$34;
        .byte #$34;
        .byte #$34;
        .byte #$34;
        .byte #$34;
        .byte #$34;
        .byte #$34;
        .byte #$34;
        .byte #$34;
        .byte #$34;
        .byte #$34;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Array of bytes to draw the Player graphics
; These bytes are added in the final ROM addresses (from $FFE6-$FFF0)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;org $ffe6
PlayerFront:
	.byte #%00000000 ; zero padding, also clears register 	
	.byte #%11100111;$F6
        .byte #%01100110;$0C
        .byte #%01111110;$10
        .byte #%01111110;$F6
        .byte #%01011010;$F6
        .byte #%01111110;$0C
        .byte #%11111111;$00
        .byte #%11111111;$00		

; https://alienbill.com/2600/playerpalnext.html
; Dynamically calculating Sprite's height
; "." means "Current line"
P0_HEIGHT = . - PlayerFront

PlayerLeft:
	.byte #%00000000 ; zero padding, also clears register 	
	.byte #%11011100;$F6
        .byte #%01101100;$0C
        .byte #%11111100;$00
        .byte #%11111100;$F6
        .byte #%01011100;$F6
        .byte #%11111111;$0C
        .byte #%11111110;$00
        .byte #%11111110;$00

PlayerLeftWalk_01:
	.byte #%00000000 ; zero padding, also clears register
        .byte #%11000001;$F6
        .byte #%01100111;$0C
        .byte #%01111110;$00
        .byte #%01111110;$F6
        .byte #%00101110;$F6
        .byte #%01111111;$0C
        .byte #%11111111;$00
        .byte #%11111111;$00

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Array of bytes to hold the Player colors
; These bytes are added in the final ROM addresses (from $FFF1-$FFFB)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	;org $fff1
PlayerColors:
	.byte #$00
	.byte #$F6;
        .byte #$0C;
        .byte #$00;
        .byte #$F6;
        .byte #$F6;
        .byte #$0C;
        .byte #$00;
        .byte #$00;

PlayerColors2:
	.byte #$00
	.byte #$F6;
        .byte #$0C;
        .byte #$00;
        .byte #$F6;
        .byte #$F6;
        .byte #$0C;
        .byte #$00;
        .byte #$00;

PlayerColors3:
	.byte #$00
        .byte #$F6;
        .byte #$0C;
        .byte #$00;
        .byte #$F6;
        .byte #$F6;
        .byte #$0C;
        .byte #$00;
        .byte #$00;

;===============================================================================
; Digit Graphics
;===============================================================================
        align 256
DigitsGraphics:
      .byte %01110111          ; ### ###
      .byte %01010101          ; # # # #
      .byte %01010101          ; # # # #
      .byte %01010101          ; # # # #
      .byte %01110111          ; ### ###
DIGITS_HEIGHT = . - DigitsGraphics

      .byte %00010001          ;   #   #
      .byte %00010001          ;   #   #
      .byte %00010001          ;   #   #
      .byte %00010001          ;   #   #
      .byte %00010001          ;   #   #

      .byte %01110111          ; ### ###
      .byte %00010001          ;   #   #
      .byte %01110111          ; ### ###
      .byte %01000100          ; #   #
      .byte %01110111          ; ### ###

      .byte %01110111          ; ### ###
      .byte %00010001          ;   #   #
      .byte %00110011          ;  ##  ##
      .byte %00010001          ;   #   #
      .byte %01110111          ; ### ###

      .byte %01010101          ; # # # #
      .byte %01010101          ; # # # #
      .byte %01110111          ; ### ###
      .byte %00010001          ;   #   #
      .byte %00010001          ;   #   #

      .byte %01110111          ; ### ###
      .byte %01000100          ; #   #
      .byte %01110111          ; ### ###
      .byte %00010001          ;   #   #
      .byte %01110111          ; ### ###

      .byte %01110111          ; ### ###
      .byte %01000100          ; #   #
      .byte %01110111          ; ### ###
      .byte %01010101          ; # # # #
      .byte %01110111          ; ### ###

      .byte %01110111          ; ### ###
      .byte %00010001          ;   #   #
      .byte %00010001          ;   #   #
      .byte %00010001          ;   #   #
      .byte %00010001          ;   #   #

      .byte %01110111          ; ### ###
      .byte %01010101          ; # # # #
      .byte %01110111          ; ### ###
      .byte %01010101          ; # # # #
      .byte %01110111          ; ### ###

      .byte %01110111          ; ### ###
      .byte %01010101          ; # # # #
      .byte %01110111          ; ### ###
      .byte %00010001          ;   #   #
      .byte %01110111          ; ### ###

      .byte %00100010          ;  #   #
      .byte %01010101          ; # # # #
      .byte %01110111          ; ### ###
      .byte %01010101          ; # # # #
      .byte %01010101          ; # # # #

      .byte %01110111          ; ### ###
      .byte %01010101          ; # # # #
      .byte %01100110          ; ##  ##
      .byte %01010101          ; # # # #
      .byte %01110111          ; ### ###

      .byte %01110111          ; ### ###
      .byte %01000100          ; #   #
      .byte %01000100          ; #   #
      .byte %01000100          ; #   #
      .byte %01110111          ; ### ###

      .byte %01100110          ; ##  ##
      .byte %01010101          ; # # # #
      .byte %01010101          ; # # # #
      .byte %01010101          ; # # # #
      .byte %01100110          ; ##  ##

      .byte %01110111          ; ### ###
      .byte %01000100          ; #   #
      .byte %01110111          ; ### ###
      .byte %01000100          ; #   #
      .byte %01110111          ; ### ###

      .byte %01110111          ; ### ###
      .byte %01000100          ; #   #
      .byte %01100110          ; ##  ##
      .byte %01000100          ; #   #
      .byte %01000100          ; #   #

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; This table converts the "remainder" of the division by 15 (-1 to -15) to the correct
; fine adjustment value. This table is on a page boundary to guarantee the processor
; will cross a page boundary and waste a cycle in order to be at the precise position
; for a RESP0,x write
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FineAdjustBegin:
            DC.B %01110000; Left 7 
            DC.B %01100000; Left 6
            DC.B %01010000; Left 5
            DC.B %01000000; Left 4
            DC.B %00110000; Left 3
            DC.B %00100000; Left 2
            DC.B %00010000; Left 1
            DC.B %00000000; No movement.
            DC.B %11110000; Right 1
            DC.B %11100000; Right 2
            DC.B %11010000; Right 3
            DC.B %11000000; Right 4
            DC.B %10110000; Right 5
            DC.B %10100000; Right 6
            DC.B %10010000; Right 7

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Close Catridge
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	org $fffc
        .word Start	; reset vector
        .word Start	; BRK vector
