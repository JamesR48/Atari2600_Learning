
	processor 6502
        include "vcs.h"
        include "macro.h"
        include "xmacro.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start an unitialized segment at $80 for variable declaration
; We've memory from $80 to $FF to work with, minus a few at the
; end if we use the Stack
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	seg.u Variables
        org $80
P0Height equ #11 ; Defines 1 decimal 10 for Player0 height (constant)
P1Height equ #11 ; Defines 1 decimal 10 for Player1 height (constant)

P0PosY ds 1 ; Defines 1 byte for Player0 sprite Vertical Position
P1PosY ds 1 ; Defines 1 byte for Player1 sprite Vertical Position

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Init Catridge
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	seg Code
        org $f000
        
Start:
	sei ; Clear interrupts
        cld ; Clear Decimal Binary Code Math
        ldx $ff ; Set Stack Pointer to last Mem position
        txs ; Transfer X to Stack Pointer
        
        ldx #$ff
        lda #0
ZeroMemLoop:
	sta $00,x
        dex
        bne ZeroMemLoop
        sta $00

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Initial setup of Background and Players
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ldx #$00
        stx COLUBK ; Set Background color
	ldx #96
        stx P0PosY ; Set Player0 initial Vertical Position
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Start New Frame by configuring VBlank and VSync
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
NextFrame:
	lda #2
        sta VSYNC ; Turn on Vertical Synchronization
        sta VBLANK ; Turn on Vertical Blank

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set 3 empty Scanlines for VSYNC
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        sta WSYNC ; Wait (Horizontal Blank) Synchronization
        sta WSYNC
        sta WSYNC
        
        lda #0
        sta VSYNC ; turn off VSYNC
        
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set 37 empty Scanlines for VBLANK
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ldx #37
VBlankLoop:
	sta WSYNC
        dex
        bne VBlankLoop
        stx VBLANK ; turn off VBLANK

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Here starts the 192 visible Scanlines
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ldx #192 ; X will hold the remaining Scanlines
Scanline:
	txa ; transfer X to A
        sec ; Set Carry flag before subtracting
        sbc P0PosY ; Subtract P0 sprite Y coordinate - A
        cmp P0Height ; Are we inside the sprite height bounds?
        bcc LoadBitmap ; If result < SpriteHeight, call subroutine
        lda #0 ; Else, set index to 0, turning off P0 graphics

LoadBitmap:
	tay ; Transfer A to Y
        lda PlayerGraphics,Y ; Loop the PlayerGraphics table
        sta WSYNC ; Wait for Horizontal Synchronization (next Scanline)
        sta GRP0 ; Set the graphics of P0 for this Scanline
        lda PlayerColors,Y ; Loop the PlayerColors table
        sta COLUP0 ; Set the P0 color for this Scanline
        dex
        bne Scanline ; Repeat next Scanline until finish the 192

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Set 30 empty Scanlines for Overscan
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ldx #30
        lda #2
        sta VBLANK ; Turn on VBLANK
OverscanLoop:
	sta WSYNC
        dex
        bne OverscanLoop

	dec P0PosY ; Decrement Player0 Y position each frame to make it fall
	
        jmp NextFrame

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Array of bytes to draw the Player graphics
; These bytes are added in the final ROM addresses (from $FFE6-$FFF0)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	org $ffe6
PlayerGraphics:
	.byte #%00000000 ;  	
	.byte #%11100111 ; ###  ###	
        .byte #%01100110 ;  ##  ## 	
        .byte #%01100110 ;  ##  ## 	
        .byte #%11111111 ; ########	
        .byte #%11111111 ; ########	
        .byte #%11111111 ; ########	
        .byte #%10011001 ; #  ##  #	
        .byte #%10011001 ; #  ##  #	
        .byte #%11111111 ; ########	
        .byte #%01111110 ;  ######		

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Array of bytes to hold the Player colors
; These bytes are added in the final ROM addresses (from $FFF1-$FFFB)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	org $fff1
PlayerColors:
	.byte #$00 	 ;
	.byte #$44 	 ; ###  ###
        .byte #$ac 	 ;  ##  ## 	
        .byte #$ac 	 ;  ##  ##
        .byte #$ac 	 ; ########
        .byte #$44 	 ; ########	
        .byte #$44 	 ; ########	
        .byte #$2e 	 ; #  ##  #	
        .byte #$2e 	 ; #  ##  #
        .byte #$2e 	 ; ########
        .byte #$2e 	 ;  ######

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Close Catridge
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

	org $fffc
        .word Start	; reset vector
        .word Start	; BRK vector
